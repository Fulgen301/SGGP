/*--Das Stargate --*/

#strict

local Name;
local pTo;
local pFrom;
local time;
local iris;
local heat;

//Namenssetzung des Gates:
func Initialize()
{
  heat = 0;
  SetAction("Idle");
  Name = Format("Stargate %v",(ObjectCount(SGAG)+ObjectCount(STGT))+1);
  return(1);
}

//Hat das Gate eine Iris?
func HasIris()
{
  return(iris);
}

//NEIN?! Dann müssen wir eine Installieren:
func InstallIris()
{
  iris = CreateObject(SGIR);
  SetObjectOrder(this(),iris);
  LocalN("target",iris) = this();
  return(1);
}

//Abfrage ob die Iris zu ist
func IsClose()
{
  if(!iris)
  {
   return(0);
  }
  return(iris->IsClose());
}

//Abfrage ob beim angewählten Gate die Iris geschlossen ist
func pToClose()
{
  if(!pTo)
  {
   return();
  }
  return(pTo->IsClose());
}

//Sound wenn was gegen die Iris kracht
func Dong()
{
  Sound("IrisHit");
  return(1);
}

//Kontrolle an die Iris weitergeben
func ControlIris()
{
  if(iris)
  {
   iris->Switch();
  }
  return(1);
}

func GDOControlIris(passw)
{
  if(iris)
  {
   iris->GDOControl(passw);
  }
  return(1);
}

//Tötung beim Kawoosh
func KawooshKill()
{
  if(GetPhase() == 35)
  {
   var xobj;
   DigFree(GetX()+18,GetY()+46,12);
   DigFree(GetX()+41,GetY()+44,15);
   DigFree(GetX()+10,GetY()+46,11);
   DigFree(GetX()+63,GetY()+43,13);
   DigFree(GetX()+46,GetY()+42,27);
   for(xobj in FindObjects(Find_InRect(0,22,90,45),Find_Or(Find_OCF(OCF_Living()),Find_OCF(OCF_Collectible()))))
   {
    xobj->RemoveObject();
   }
   for(xobj in FindObjects(Find_InRect(0,22,90,45),Find_Category(C4D_Vehicle)))
   {
    xobj->DoDamage(1000);
   }
  }
  
  if(GetPhase() == 10)
  {
   var xobj;
   for(xobj in FindObjects(Find_InRect(60,22,30,45),Find_Or(Find_OCF(OCF_Living()),Find_OCF(OCF_Collectible()))))
   {
    xobj->RemoveObject();
   }
   for(xobj in FindObjects(Find_InRect(60,22,30,45),Find_Category(C4D_Vehicle)))
   {
    xobj->DoDamage(1000);
   }
  }
  
  if(GetPhase() == 60)
  {
   var xobj;
   for(xobj in FindObjects(Find_InRect(60,22,30,45),Find_Or(Find_OCF(OCF_Living()),Find_OCF(OCF_Collectible()))))
   {
    xobj->RemoveObject();
   }
   for(xobj in FindObjects(Find_InRect(60,22,30,45),Find_Category(C4D_Vehicle)))
   {
    xobj->DoDamage(1000);
   }
  }
  return(1);
}

//Die Sounds beim anwählen
func DialSounds()
{
  if(GetPhase() == 1)
  {
   Sound("pegasus_startroll");
  }
  
  if(GetPhase() == 8)
  {
   Sound("pegasus_chevron2");
  }
  
  if(GetPhase() == 15)
  {
   Sound("pegasus_chevron2");
  }
  
  if(GetPhase() == 22)
  {
   Sound("pegasus_chevron2");
  }
  
  if(GetPhase() == 29)
  {
   Sound("pegasus_chevron2");
  }
  
  if(GetPhase() == 36)
  {
   Sound("pegasus_chevron2");
  }
  
  if(GetPhase() == 44)
  {
   Sound("pegasus_chevron2");
  }

  if(GetPhase() == 50)
  {
   Sound("pegasus_chevron2");
  }
  return(1);
}

func OpenSound()
{
  Sound("StargateOpen");
  return(1);
}

//Gibt den aktuellen Status des Gates zurück:
func GetState()
{
  if(GetAction() eq "Outgoing3" || GetAction() eq "Outgoing4") 
  {
   return(1);
  }
  
  if(GetAction() eq "Incoming3" || GetAction() eq "Incoming4")
  {
   return(2);
  }
  
  if(GetAction() eq "Idle") 
  {
   return(0);
  }
  return(3);
}

//Gibt nur den Namen zurück:
func GetName()
{
  return(Name);
}

//Setzt den neuen Namen
func ReName(newName)
{
  if(newName == 0)
  {
   Message("Es muss ein Name gesetzt werden!",this());
   Sound("Error");
   return(1);
  }
  Name = newName;
  return(1);
}

//Beschäftigt?!
func IsBusy()
{
  if(GetAction() eq "Idle")
  {
   return();
  }
  return(1);
}

//Die Namensüberprüfung/1. Anwahl des Gates:
func Dial(string gate)
{
  if(IsBusy())
  {
   return(1);
  }
  
  var pGate;
  for(pGate in FindObjects(Find_Or(Find_ID(STGT),Find_ID(SGAG)),Find_Func(IsBusy())))
//  while(pGate = FindObject(STGT,0,0,0,0,0,0,0,0,pGate))
  {
   if (pGate != this())
   {
    var szName;
    szName = pGate -> GetName(pGate);
    if (szName S= gate)
    {
     CallGate(pGate);
     return(1);
	}
   }
  }
  Message("<c ff0000>Gate wurde nicht gefunden!</c>",this());
  Sound("pegasus_fail",0,0,50);
  return(1);
}

//Das eigentliche "Anwählen" des Gates beginnt:
func CallGate(pGate)
{
  if(GetAction(pGate) ne "Idle")
  {
   return(1);
  }
  time = 20;
  pTo = pGate;
  LocalN("pFrom",pGate) = this();
  SetAction("Outgoing1");
  pGate->SetAction("Income1");
  return(1);
}

//Überprüft ob das Gate sich abschalten muss:
func Check()
{
  if(heat > 0)
  {
   if(iris)
   {
	   LocalN("temp", iris) = heat / 1000;
   }
   heat -= 2;
   if(IsClose())
   {
    heat -= 2;
   }
   SetClrModulation(RGB(255,255-(heat/1000),255-(heat/1000)));
  }
  if(heat < 0)
  {
   heat = 0;
  }
  if(heat > 255000)
  {
   var ramp;
   if(ramp = FindObject2(Find_Or(Find_ID(SGR1),Find_ID(SGR2),Find_ID(SGR3)),Sort_Distance()))
   {
    if(LocalN("target",ramp) == this())
    {
     ramp->RemoveObject();
    }
    Explode(300);
   }
   return(1);
  }
  if(IsClose())
  {
   if(GetAction() eq "Income2")
   {
    SetAction("Income3");
   }
   if(GetAction() eq "Outgoing2")
   {
    SetAction("Outgoing3");
   }
  }
  
  if(GetAction() eq "Off")
  {
   return(1);
  }
  
  if(GetAction() eq "Idle")
  {
   return(1);
  }

  if(!pFrom)
  {
   if(!pTo)
   {
    Deactivate();
   }
  }
  if(pTo)
  {
   if(GetAction(pTo) eq "Idle")
   {
    Deactivate();
   }
  }
  
  if(pFrom)
  {
   if(GetAction(pFrom) eq "Idle")
   {
    Deactivate();
   }
  }
  return(1);
}

//Abschaltzeit
func ShutDelay()
{
  time --;
  if(time <= 0)
  {
   Deactivate();
  }
  return(1);
}

//Das Gate schaltet sicht ab:
func Deactivate(all)
{
  if(!all)
  {
   if(pTo == 0)
   {
    if(pFrom != 0)
    {
     return(1);
    }
   }
  }
  
  if(pTo)
  {
   LocalN("pTo",pTo) = 0;
   LocalN("pFrom",pTo) = 0;
   pTo -> Deactivate(1);
   pTo = 0;
  }
  
  if(pFrom)
  {
   LocalN("pTo",pFrom) = 0;
   LocalN("pFrom",pFrom) = 0;
   pFrom -> Deactivate(1);
   pFrom = 0;
  }
  
  if(GetAction() eq "Outgoing1")
  {
   Sound("pegasus_fail");
   SetAction("Idle");
   return(1);
  }
  
  if(GetAction() eq "Income1")
  {
   Sound("pegasus_fail");
   SetAction("Idle");
   return(1);
  }
  
  if(GetAction() ne "Off")
  {
   if(GetAction() ne "Idle")
   {
    SetAction("Off");
   }
  }
  return(1);
}

//Überbringung des Ziels:
func Transport()
{
  var obj;
  for(obj in FindObjects(Find_InRect(70,0,25,80)))
  {
   if(GetXDir(obj) < 1)
   {
    return(1);
   }
   if(IsClose())
   {
    return(1);
   }
   if(pTo->IsClose())
   {
    obj->RemoveObject();
    pTo->Dong();
    Sound("teleport");
    return(1);
   }
   if(GetID(obj) == TAUV)
   {
    LocalN("dir",obj) = 180;
    obj->SetPosition(GetX(pTo),GetY(pTo));
    Sound("teleport");
    Sound("teleport",0,pTo);
    return(1);
   }
   Sound("teleport");
   Sound("teleport",0,pTo);
   var hX;
   var hY;
   hX = GetX(obj)-GetX();
   hY = GetY(obj)-GetY();
   SetPosition(GetX(pTo)+hX,GetY(pTo)+hY,obj);
   obj->SetDir(0);
   SetComDir(COMD_Left(),obj);
   SetDir(DIR_Left(),obj);
   obj->SetXDir(GetXDir(obj)*-1);
  }
  return(1);
}